class InkBrush{constructor(canvas,ctx){this.canvas=canvas;this.ctx=ctx;this.properties={size:20,color:'#000000',opacity:0.8,pressureSensitivity:0.7,velocityEffect:0.5,angle:0,fixedAngle:false};this.currentPath=null;this.textures={brush:null,paper:null};this._lastX=0;this._lastY=0;this._lastPressure=0.5;this.buffer=document.createElement('canvas');this.bufferCtx=this.buffer.getContext('2d',{willReadFrequently:true});this.diffusionEnabled=true;this.diffusionRadius=2;this.diffusionIterations=1;this._loadTextures();}setProperties(props){Object.assign(this.properties,props);}_loadTextures(){if(!window.textureManager)return;this.textures.brush=textureManager.getBrushTexture('bristle_scattered');this.textures.paper=textureManager.getPaperTexture('paper_smooth');}startStroke(x,y,pressure){this._lastX=x;this._lastY=y;this._lastPressure=pressure;strokeProcessor.startStroke(x,y,pressure);this.currentPath=new Path(this.properties.color,this.properties.opacity);this.drawStamp(x,y,pressure);}updateStroke(x,y,pressure){if(!this.currentPath)return;console.time('brush:updateStroke');const distance=MathUtils.distance(this._lastX,this._lastY,x,y);const stampDistance=this.properties.size*0.1;const stampCount=Math.max(1,Math.floor(distance/stampDistance));console.log('stampCount:',stampCount);if(stampCount>1){for(let i=1;i<=stampCount;i++){const t=i/stampCount;const lx=MathUtils.lerp(this._lastX,x,t);const ly=MathUtils.lerp(this._lastY,y,t);const lp=MathUtils.lerp(this._lastPressure,pressure,t);const direction=MathUtils.angle(this._lastX,this._lastY,lx,ly);this.drawStamp(lx,ly,lp,direction);}}else{const direction=MathUtils.angle(this._lastX,this._lastY,x,y);this.drawStamp(x,y,pressure,direction);}this._lastX=x;this._lastY=y;this._lastPressure=pressure;console.timeEnd('brush:updateStroke');}endStroke(x,y,pressure){if(!this.currentPath)return;this.drawStamp(x,y,pressure);this.currentPath=null;strokeProcessor.endStroke();}drawStamp(x,y,pressure,direction=0){console.time('inkBrush:drawStamp');const adjustedPressure=MathUtils.clamp(pressure,0.2,1)*this.properties.pressureSensitivity;const velocity=strokeProcessor.getVelocity();const adjustedVelocity=MathUtils.clamp(velocity,0,2000)*(1-this.properties.velocityEffect);const brushSize=this.properties.size*adjustedPressure;console.time('inkBrush:drawBasicStamp');this.drawBasicStamp(x,y,brushSize,adjustedPressure);console.timeEnd('inkBrush:drawBasicStamp');if(this.diffusionEnabled&&brushSize>5){console.time('inkBrush:diffusion');this._applyDiffusion(x,y,brushSize);console.timeEnd('inkBrush:diffusion');}console.timeEnd('inkBrush:drawStamp');}drawBasicStamp(x,y,size,pressure){this.ctx.save();this.ctx.globalAlpha=Math.min(1,pressure*this.properties.opacity);this.ctx.fillStyle=this.properties.color;const useFallback=true;if(this.textures.brush&&!useFallback){const stampSize=size*2;this.ctx.drawImage(this.textures.brush,x-stampSize/2,y-stampSize/2,stampSize,stampSize);}else{this.ctx.beginPath();this.ctx.arc(x,y,size/2,0,Math.PI*2);this.ctx.fill();console.log(`円を描画: x=${x}, y=${y}, size=${size}, color=${this.properties.color}`);}this.ctx.restore();}_applyDiffusion(x,y,size){const radius=Math.max(2,Math.floor(size/2*this.diffusionRadius));const rectSize=radius*2+10;console.time('inkBrush:getImageData');const imageData=this.ctx.getImageData(Math.floor(x-rectSize/2),Math.floor(y-rectSize/2),Math.ceil(rectSize),Math.ceil(rectSize));console.timeEnd('inkBrush:getImageData');console.time('inkBrush:applyDiffusion');inkEffects.applyDiffusion(imageData,this.diffusionIterations,this.properties.color);console.timeEnd('inkBrush:applyDiffusion');console.time('inkBrush:putImageData');this.ctx.putImageData(imageData,Math.floor(x-rectSize/2),Math.floor(y-rectSize/2));console.timeEnd('inkBrush:putImageData');}}