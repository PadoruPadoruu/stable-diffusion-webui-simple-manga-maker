class UIControls{
constructor(){
this.currentBrushType='ink';
this.brushSize=20;
this.brushColor='#000000';
this.brushOpacity=0.8;
this.pressureSensitivity=0.7;
this.velocityEffect=0.5;
this.angle=45;
this.fixedAngle=true;
this.elements={};
this.onBrushChange=null;
this.onClearCanvas=null;
this.onUndo=null;
this.onSaveImage=null;
}
init(){
this._cacheElements();
this._setupEventListeners();
this._updateUI();
console.log('UI初期化完了');
}
_cacheElements(){
const ids=['brush-type-ink','brush-type-calligraphy','brush-size','brush-size-value','pressure-sensitivity','pressure-value','velocity-effect','velocity-value','angle','angle-value','brush-color','clear-canvas','undo','save-image','pressure-status','velocity-status','coordinates-status'];
ids.forEach(id=>{
this.elements[id]=document.getElementById(id);
});
}
_setupEventListeners(){
if(this.elements['brush-type-ink']){
this.elements['brush-type-ink'].addEventListener('click',()=>this._setBrushType('ink'));
}
if(this.elements['brush-type-calligraphy']){
this.elements['brush-type-calligraphy'].addEventListener('click',()=>this._setBrushType('calligraphy'));
}
if(this.elements['brush-size']){
this.elements['brush-size'].addEventListener('input',(e)=>{
this.brushSize=parseInt(e.target.value,10);
this._updateSizeValue();
this._notifyBrushChange();
});
}
if(this.elements['pressure-sensitivity']){
this.elements['pressure-sensitivity'].addEventListener('input',(e)=>{
this.pressureSensitivity=parseInt(e.target.value,10)/100;
this._updatePressureValue();
this._notifyBrushChange();
});
}
if(this.elements['velocity-effect']){
this.elements['velocity-effect'].addEventListener('input',(e)=>{
this.velocityEffect=parseInt(e.target.value,10)/100;
this._updateVelocityValue();
this._notifyBrushChange();
});
}
if(this.elements['angle']){
this.elements['angle'].addEventListener('input',(e)=>{
this.angle=parseInt(e.target.value,10);
this._updateAngleValue();
this._notifyBrushChange();
});
}
if(this.elements['brush-color']){
this.elements['brush-color'].addEventListener('input',(e)=>{
this.brushColor=e.target.value;
this._notifyBrushChange();
});
}
if(this.elements['clear-canvas']){
this.elements['clear-canvas'].addEventListener('click',()=>{
if(this.onClearCanvas)this.onClearCanvas();
});
}
if(this.elements['undo']){
this.elements['undo'].addEventListener('click',()=>{
if(this.onUndo)this.onUndo();
});
}
if(this.elements['save-image']){
this.elements['save-image'].addEventListener('click',()=>{
if(this.onSaveImage)this.onSaveImage();
});
}
}
_setBrushType(type){
this.currentBrushType=type;
if(this.elements['brush-type-ink']){
this.elements['brush-type-ink'].classList.toggle('active',type==='ink');
}
if(this.elements['brush-type-calligraphy']){
this.elements['brush-type-calligraphy'].classList.toggle('active',type==='calligraphy');
}
document.activeElement.blur();
this.fixedAngle=type==='calligraphy';
this._notifyBrushChange();
}
_updateSizeValue(){
if(this.elements['brush-size-value']){
this.elements['brush-size-value'].textContent=this.brushSize;
}
}
_updatePressureValue(){
if(this.elements['pressure-value']){
this.elements['pressure-value'].textContent=`${Math.round(this.pressureSensitivity*100)}%`;
}
}
_updateVelocityValue(){
if(this.elements['velocity-value']){
this.elements['velocity-value'].textContent=`${Math.round(this.velocityEffect*100)}%`;
}
}
_updateAngleValue(){
if(this.elements['angle-value']){
this.elements['angle-value'].textContent=`${this.angle}°`;
}
}
_notifyBrushChange(){
if(this.onBrushChange){
const brushSettings={
type:this.currentBrushType,
size:this.brushSize,
color:this.brushColor,
opacity:this.brushOpacity,
pressureSensitivity:this.pressureSensitivity,
velocityEffect:this.velocityEffect,
angle:MathUtils.degreesToRadians(this.angle),
fixedAngle:this.fixedAngle
};
this.onBrushChange(brushSettings);
}
}
_updateUI(){
this._setBrushType(this.currentBrushType);
if(this.elements['brush-size']){
this.elements['brush-size'].value=this.brushSize;
this._updateSizeValue();
}
if(this.elements['pressure-sensitivity']){
this.elements['pressure-sensitivity'].value=this.pressureSensitivity*100;
this._updatePressureValue();
}
if(this.elements['velocity-effect']){
this.elements['velocity-effect'].value=this.velocityEffect*100;
this._updateVelocityValue();
}
if(this.elements['angle']){
this.elements['angle'].value=this.angle;
this._updateAngleValue();
}
if(this.elements['brush-color']){
this.elements['brush-color'].value=this.brushColor;
}
}
updateStatus(pressure,velocity){
if(this.elements['pressure-status']){
this.elements['pressure-status'].textContent=`筆圧:${pressure.toFixed(2)}`;
}
if(this.elements['velocity-status']){
this.elements['velocity-status'].textContent=`速度:${velocity.toFixed(2)}`;
}
}
updateCoordinates(x,y){
if(this.elements['coordinates-status']){
this.elements['coordinates-status'].textContent=`座標:${Math.round(x)},${Math.round(y)}`;
}
}
setOnBrushChange(callback){
this.onBrushChange=callback;
}
setOnClearCanvas(callback){
this.onClearCanvas=callback;
}
setOnUndo(callback){
this.onUndo=callback;
}
setOnSaveImage(callback){
this.onSaveImage=callback;
}
}
const uiControls=new UIControls();
