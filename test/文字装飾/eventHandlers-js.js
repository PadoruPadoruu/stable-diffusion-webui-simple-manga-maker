function setupEventListeners(){
['dragenter','dragover','dragleave','drop'].forEach(eventName=>{
dropArea.addEventListener(eventName,preventDefaults,false);
});
['dragenter','dragover'].forEach(eventName=>{
dropArea.addEventListener(eventName,highlight,false);
});
['dragleave','drop'].forEach(eventName=>{
dropArea.addEventListener(eventName,unhighlight,false);
});
dropArea.addEventListener('drop',handleDrop,false);
imageInput.addEventListener('change',handleFileSelect,false);
cannyThresh1.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.edges=true;
processFlags.lines=true;
processAll();
}
});
cannyThresh2.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.edges=true;
processFlags.lines=true;
processAll();
}
});
contourThreshold.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.contours=true;
processAll();
}
});
houghThreshold.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.lines=true;
processAll();
}
});
thinningIterations.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.skeleton=true;
processAll();
}
});
curveEpsilon.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.curves=true;
processAll();
}
});
brushPressureStrength.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.brushPressure=true;
processAll();
}
});
densityKernelSize.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.density=true;
processAll();
}
});
charSeparationThresh.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.separation=true;
processAll();
}
});
gaussianBlurSize.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.edges=true;
processAll();
}
});
edgeDilateIter.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.edges=true;
processAll();
}
});
minContourArea.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.contours=true;
processAll();
}
});
contourMode.addEventListener('change',function(){
if(originalMat){
processFlags.contours=true;
processAll();
}
});
structElementSize.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.skeleton=true;
processAll();
}
});
structElementShape.addEventListener('change',function(){
if(originalMat){
processFlags.skeleton=true;
processAll();
}
});
minLineLength.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.lines=true;
processAll();
}
});
maxLineGap.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.lines=true;
processAll();
}
});
minCurveLength.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.curves=true;
processAll();
}
});
curveFitMethod.addEventListener('change',function(){
if(originalMat){
processFlags.curves=true;
processAll();
}
});
arrowDensity.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.brushPressure=true;
processAll();
}
});
gradientThreshold.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.brushPressure=true;
processAll();
}
});
densityFilterType.addEventListener('change',function(){
if(originalMat){
processFlags.density=true;
processAll();
}
});
colorMapType.addEventListener('change',function(){
if(originalMat){
processFlags.density=true;
processAll();
}
});
distTransformMethod.addEventListener('change',function(){
if(originalMat){
processFlags.separation=true;
processAll();
}
});
separationDilateSize.addEventListener('input',function(){
updateParameterValue();
if(originalMat){
processFlags.separation=true;
processAll();
}
});
updateParameterValue();
}
function preventDefaults(e){
e.preventDefault();
e.stopPropagation();
}
function highlight(){
dropArea.classList.add('highlight');
}
function unhighlight(){
dropArea.classList.remove('highlight');
}
function handleDrop(e){
const dt=e.dataTransfer;
const files=dt.files;
handleFiles(files);
}
function handleFileSelect(e){
const files=e.target.files;
handleFiles(files);
}